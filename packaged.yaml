AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'SAM template for Step Functions, SQS, and Lambda

  '
Metadata:
  AWS::ServerlessRepo::Application:
    Name: batch-processing-stepFunction
    Description: This repository contains a serverless application built using AWS
      Serverless Application Model (SAM). It demonstrates the power of AWS Step Functions
      for batch processing, leveraging S3, SQS, and Lambda.
    Author: Jordi Tanta
    SpdxLicenseId: Apache-2.0
    LicenseUrl: s3://package-cloud-seek/15ab8f41b65b3696434ad6e6f58bab4a
    ReadmeUrl: s3://package-cloud-seek/cbf2555a7a0a3d90dcfc87e03e1d5348
    Labels:
    - finops
    - storage
    - stepFunction
    - batch
    HomePageUrl: https://github.com/cloud-seek/batch-processing-stepFunction
    SemanticVersion: '0.0.1'
    SourceCodeUrl: https://github.com/cloud-seek/batch-processing-stepFunction
Resources:
  DataProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: nodejs20.x
      CodeUri: s3://package-cloud-seek/4fa14a83ecc8820643a38781fb1e84d9
      MemorySize: 128
      Timeout: 60
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName: input-bucket
      - SQSSendMessagePolicy:
          QueueName:
            Ref: NotificationQueue
    Metadata:
      SamResourceId: DataProcessFunction
  NotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: Notification
    Metadata:
      SamResourceId: NotificationQueue
  MyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: MyStepFunction
      StateMachineType: STANDARD
      DefinitionString:
        Fn::Sub: "{\n  \"StartAt\": \"DataProcessMap\",\n  \"States\": {\n    \"DataProcessMap\"\
          : {\n      \"Type\": \"Map\",\n      \"ItemProcessor\": {\n        \"ProcessorConfig\"\
          : {\n          \"Mode\": \"DISTRIBUTED\",\n          \"ExecutionType\":\
          \ \"EXPRESS\"\n        },\n        \"StartAt\": \"Lambda Invoke\",\n   \
          \     \"States\": {\n          \"Lambda Invoke\": {\n            \"Type\"\
          : \"Task\",\n            \"Resource\": \"arn:aws:states:::lambda:invoke\"\
          ,\n            \"OutputPath\": \"$.Payload\",\n            \"Parameters\"\
          : {\n              \"Payload.$\": \"$\",\n              \"FunctionName\"\
          : \"${DataProcessFunction.Arn}\"\n            },\n            \"Retry\"\
          : [\n              {\n                \"ErrorEquals\": [\n             \
          \     \"Lambda.ServiceException\",\n                  \"Lambda.AWSLambdaException\"\
          ,\n                  \"Lambda.SdkClientException\",\n                  \"\
          Lambda.TooManyRequestsException\"\n                ],\n                \"\
          IntervalSeconds\": 1,\n                \"MaxAttempts\": 3,\n           \
          \     \"BackoffRate\": 2\n              }\n            ],\n            \"\
          End\": true\n          }\n        }\n      },\n      \"ItemReader\": {\n\
          \        \"Resource\": \"arn:aws:states:::s3:getObject\",\n        \"ReaderConfig\"\
          : {\n          \"InputType\": \"JSON\"\n        },\n        \"Parameters\"\
          : {\n          \"Bucket.$\": \"$.bckSource\",\n          \"Key.$\": \"$.bckKey\"\
          \n        }\n      },\n      \"ResultWriter\": {\n        \"Resource\":\
          \ \"arn:aws:states:::s3:putObject\",\n        \"Parameters\": {\n      \
          \    \"Bucket.$\": \"$.bckResult\",\n          \"Prefix\": \"/log\"\n  \
          \      }\n      },\n      \"MaxConcurrency\": 10,\n      \"End\": true,\n\
          \      \"Catch\": [\n        {\n          \"ErrorEquals\": [\n         \
          \   \"States.ALL\"\n          ],\n          \"ResultPath\": \"$.error\"\
          ,\n          \"Next\": \"SendToSQS\"\n        }\n      ],\n      \"ToleratedFailurePercentage\"\
          : 50\n    },\n    \"SendToSQS\": {\n      \"Type\": \"Task\",\n      \"\
          Resource\": \"arn:aws:states:::sqs:sendMessage\",\n      \"Parameters\"\
          : {\n        \"QueueUrl\": \"${NotificationQueue.QueueUrl}\",\n        \"\
          MessageBody.$\": \"$.error\"\n      },\n      \"End\": true\n    }\n  }\n\
          }\n"
      RoleArn:
        Fn::GetAtt:
        - StepFunctionsExecutionRole
        - Arn
    Metadata:
      SamResourceId: MyStateMachine
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: states.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: StepFunctionsExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - sqs:SendMessage
            - s3:GetObject
            - s3:PutObject
            - states:StartExecution
            Resource: '*'
    Metadata:
      SamResourceId: StepFunctionsExecutionRole
Outputs:
  DataProcessFunctionArn:
    Description: ARN of the DataProcess function
    Value:
      Fn::GetAtt:
      - DataProcessFunction
      - Arn
  NotificationQueueUrl:
    Description: URL of the Notification SQS queue
    Value:
      Ref: NotificationQueue
  StateMachineArn:
    Description: ARN of the Step Function
    Value:
      Ref: MyStateMachine
